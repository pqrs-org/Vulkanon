/*
Bmp 4/8 Bits to GBA Converter By Bruno Vedder.
With modifications by Pete Elmore.
bg/bg_result_clear.bmp Opened.
Bmp signature found.
Bmp width: 80
Bmp height: 16
Bmp not compressed: ok.
One plane.
Bmp is 4 Bit per pixel.
16 colors used. (0 mean full bpp).
Bmp data starts at 76h.
Allocating 640 bytes.
CMAP loaded.
Data loaded. */
namespace TILEINFO_bg_result_clear {
  enum {
    w = 10,
    h = 2,
    size = 20,
  };
  const unsigned short palette[] = {
    0x0,0x842,0x1084,0x1ce7,0x2529,0x2d6b,0x35ad,0x3def,0x4210,0x4a52,0x56b5,0x5ef7,0x6318,0x6f7b,0x739c,0x7fff,
    };

  const unsigned char img[] = {

    // Tile [0 , 0] 
    0x11,0x11,0xd6,0xff,
    0x11,0x91,0xff,0xff,
    0x11,0xf7,0xff,0xae,
    0x21,0xff,0xcf,0x12,
    0x81,0xff,0x3f,0x11,
    0xc1,0xff,0x1a,0x11,
    0xe1,0xff,0x17,0x11,
    0xf1,0xff,0x15,0x11,
    
    // Tile [1 , 0] 
    0xff,0xaf,0x13,0x11,
    0xff,0xff,0x5f,0x11,
    0xa9,0xff,0xef,0x13,
    0x11,0xe3,0xff,0x19,
    0x11,0x71,0xff,0x1d,
    0x11,0x21,0x77,0x16,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    
    // Tile [2 , 0] 
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    
    // Tile [3 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x21,
    0x11,0x21,0xe8,0xff,
    0x11,0xd2,0xff,0xff,
    0x11,0xfa,0xdf,0x66,
    0x21,0xff,0x2f,0x11,
    
    // Tile [4 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x8d,0x11,0x11,0x41,
    0xff,0x2d,0x11,0xf4,
    0xfd,0xaf,0x11,0xfc,
    0xf2,0xff,0x22,0xff,
    
    // Tile [5 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x22,0x11,0x11,
    0xeb,0xff,0xbe,0x14,
    0xff,0xff,0xff,0x4f,
    0xcf,0x87,0xfd,0xbf,
    0x1e,0x11,0xf4,0xdf,
    
    // Tile [6 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0xe9,0x7e,0xc3,
    0x11,0xfa,0x9f,0xfe,
    0x11,0xfa,0xff,0xff,
    0x11,0xfa,0xff,0x27,
    
    // Tile [7 , 0] 
    0x11,0x11,0xf8,0xcf,
    0x11,0x11,0xf9,0xcf,
    0x11,0x11,0xf9,0xcf,
    0x12,0x11,0xf9,0xcf,
    0x3f,0x11,0xf9,0xcf,
    0x3f,0x11,0xf7,0xaf,
    0x3f,0x11,0xf5,0x8f,
    0x11,0x11,0xf3,0x6f,
    
    // Tile [8 , 0] 
    0x11,0x81,0xff,0x1c,
    0x11,0x91,0xff,0x1c,
    0x11,0x91,0xff,0x1c,
    0x11,0x91,0xff,0x1c,
    0x11,0x91,0xff,0x1c,
    0x11,0x71,0xff,0x1a,
    0x11,0x51,0xff,0x18,
    0x11,0x31,0xff,0x16,
    
    // Tile [9 , 0] 
    0x11,0xf8,0xcf,0x11,
    0x11,0xf9,0xcf,0x11,
    0x11,0xf9,0xcf,0x11,
    0x11,0xf9,0xcf,0x11,
    0x11,0xf9,0xcf,0x11,
    0x11,0xf7,0xaf,0x11,
    0x11,0xf5,0x8f,0x11,
    0x11,0xf3,0x6f,0x11,
    
    // Tile [0 , 1] 
    0xf1,0xff,0x15,0x11,
    0xe1,0xff,0x16,0x11,
    0xc1,0xff,0x19,0x11,
    0x91,0xff,0x1e,0x11,
    0x31,0xff,0x9f,0x11,
    0x11,0xfa,0xff,0x6b,
    0x11,0xc2,0xff,0xff,
    0x11,0x11,0xf9,0xff,
    
    // Tile [1 , 1] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x21,0x88,0x18,
    0x11,0x61,0xff,0x1e,
    0x11,0xd2,0xff,0x1a,
    0x75,0xfd,0xff,0x14,
    0xff,0xff,0x7f,0x11,
    0xff,0xdf,0x15,0x11,
    
    // Tile [2 , 1] 
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    0x11,0xf9,0x9f,0x11,
    
    // Tile [3 , 1] 
    0x61,0xff,0x1b,0x11,
    0x81,0xff,0xff,0xff,
    0x81,0xff,0xff,0xff,
    0x71,0xff,0x1a,0x11,
    0x41,0xff,0x1c,0x11,
    0x11,0xfe,0x6f,0x11,
    0x11,0xf6,0xff,0xee,
    0x11,0x61,0xfe,0xff,
    
    // Tile [4 , 1] 
    0xc1,0xff,0x16,0x11,
    0xff,0xff,0x18,0x51,
    0xff,0xff,0x19,0xf9,
    0x11,0x11,0x31,0xff,
    0x41,0x66,0x63,0xff,
    0xf5,0xff,0x63,0xff,
    0xff,0x7f,0x21,0xff,
    0xef,0x16,0x11,0xf7,
    
    // Tile [5 , 1] 
    0x11,0x41,0xfb,0xdf,
    0xda,0xff,0xff,0xdf,
    0xff,0xcf,0xfa,0xdf,
    0x5f,0x11,0xf4,0xdf,
    0x1c,0x11,0xf7,0xdf,
    0x4e,0x41,0xfe,0xdf,
    0xff,0xff,0xff,0xef,
    0xff,0xdf,0xf4,0xff,
    
    // Tile [6 , 1] 
    0x11,0xfa,0xaf,0x11,
    0x11,0xfa,0x8f,0x11,
    0x11,0xfa,0x8f,0x11,
    0x11,0xfa,0x8f,0x11,
    0x11,0xfa,0x8f,0x11,
    0x11,0xfa,0x8f,0x11,
    0x11,0xfa,0x8f,0x11,
    0x16,0xfa,0x8f,0x11,
    
    // Tile [7 , 1] 
    0x11,0x11,0xf1,0x4f,
    0x11,0x11,0xe1,0x3f,
    0x11,0x11,0xc1,0x1f,
    0x11,0x11,0x51,0x17,
    0x11,0x11,0x43,0x34,
    0x11,0x11,0xf9,0xcf,
    0x11,0x11,0xf9,0xcf,
    0x11,0x11,0xf9,0xcf,
    
    // Tile [8 , 1] 
    0x11,0x11,0xff,0x14,
    0x11,0x11,0xfe,0x13,
    0x11,0x11,0xfc,0x11,
    0x11,0x11,0x75,0x11,
    0x11,0x31,0x44,0x13,
    0x11,0x91,0xff,0x1c,
    0x11,0x91,0xff,0x1c,
    0x11,0x91,0xff,0x1c,
    
    // Tile [9 , 1] 
    0x11,0xf1,0x4f,0x11,
    0x11,0xe1,0x3f,0x11,
    0x11,0xc1,0x1f,0x11,
    0x11,0x51,0x17,0x11,
    0x11,0x43,0x34,0x11,
    0x11,0xf9,0xcf,0x11,
    0x11,0xf9,0xcf,0x11,
    0x11,0xf9,0xcf,0x11,
      };
  inline u16 *copyImage(u16 *vram) {
    for (u32 i = 0; i < sizeof(img) / 2; ++i) {
      *vram++ = img[i * 2] | (img[i * 2 + 1] << 8);
    }
    return vram;
  }
  inline u16 *copyPalette(u16 *pal) {
    for (u32 i = 0; i < sizeof(palette) / 2; ++i) {
      *pal++ = palette[i];
    }
    return pal;
  }
};
