/*
Bmp 4/8 Bits to GBA Converter By Bruno Vedder.
With modifications by Pete Elmore.
spr/spr_root_bullet.bmp Opened.
Bmp signature found.
Bmp width: 8
Bmp height: 64
Bmp not compressed: ok.
One plane.
Bmp is 4 Bit per pixel.
0 colors used. (0 mean full bpp).
Bmp data starts at 76h.
Allocating 256 bytes.
CMAP loaded.
Data loaded. */
namespace TILEINFO_spr_root_bullet {
  enum {
    w = 1,
    h = 8,
    size = 8,
  };
  const unsigned short palette[] = {
    0x0,0x18c6,0x318c,0x4e73,0x6739,0x7fff,0x6bfa,0x57f5,0x3fef,0x2bea,0x17e5,0x3e0,0x1ee0,0x3de0,0x5ce0,0x7c00,
    };

  const unsigned char img[] = {

    // Tile [0 , 0] 
    0x21,0x44,0x44,0x12,
    0x42,0x86,0x68,0x24,
    0x64,0xa8,0x8a,0x46,
    0x84,0xba,0xab,0x48,
    0x84,0xba,0xab,0x48,
    0x64,0xa8,0x8a,0x46,
    0x42,0x86,0x68,0x24,
    0x21,0x44,0x44,0x12,
    
    // Tile [0 , 1] 
    0x21,0x44,0x44,0x12,
    0x42,0xa6,0x6a,0x24,
    0x64,0xba,0xab,0x46,
    0xa4,0xcb,0xbc,0x4a,
    0xa4,0xcb,0xbc,0x4a,
    0x64,0xba,0xab,0x46,
    0x42,0xa6,0x6a,0x24,
    0x21,0x44,0x44,0x12,
    
    // Tile [0 , 2] 
    0x21,0x44,0x44,0x12,
    0x42,0xb6,0x6b,0x24,
    0x64,0xcb,0xbc,0x46,
    0xb4,0xdc,0xcd,0x4b,
    0xb4,0xdc,0xcd,0x4b,
    0x64,0xca,0xbc,0x46,
    0x42,0xb6,0x6b,0x24,
    0x21,0x44,0x44,0x12,
    
    // Tile [0 , 3] 
    0x21,0x44,0x44,0x12,
    0x42,0xc6,0x6c,0x24,
    0x64,0xdc,0xcd,0x46,
    0xc4,0xed,0xde,0x4c,
    0xc4,0xed,0xde,0x4c,
    0x64,0xdc,0xcd,0x46,
    0x42,0xc6,0x6c,0x24,
    0x21,0x44,0x44,0x12,
    
    // Tile [0 , 4] 
    0x21,0x44,0x44,0x12,
    0x42,0xd6,0x6d,0x24,
    0x64,0xed,0xde,0x46,
    0xd4,0xfe,0xef,0x4d,
    0xd4,0xfe,0xef,0x4d,
    0x64,0xed,0xde,0x46,
    0x42,0xd6,0x6d,0x24,
    0x21,0x44,0x44,0x12,
    
    // Tile [0 , 5] 
    0x21,0x44,0x44,0x12,
    0x42,0xc6,0x6c,0x24,
    0x64,0xdc,0xcd,0x46,
    0xc4,0xed,0xde,0x4c,
    0xc4,0xed,0xde,0x4c,
    0x64,0xdc,0xcd,0x46,
    0x42,0xc6,0x6c,0x24,
    0x21,0x44,0x44,0x12,
    
    // Tile [0 , 6] 
    0x21,0x44,0x44,0x12,
    0x42,0xb6,0x6b,0x24,
    0x64,0xcb,0xbc,0x46,
    0xb4,0xdc,0xcd,0x4b,
    0xb4,0xdc,0xcd,0x4b,
    0x64,0xca,0xbc,0x46,
    0x42,0xb6,0x6b,0x24,
    0x21,0x44,0x44,0x12,
    
    // Tile [0 , 7] 
    0x21,0x44,0x44,0x12,
    0x42,0xa6,0x6a,0x24,
    0x64,0xba,0xab,0x46,
    0xa4,0xcb,0xbc,0x4a,
    0xa4,0xcb,0xbc,0x4a,
    0x64,0xba,0xab,0x46,
    0x42,0xa6,0x6a,0x24,
    0x21,0x44,0x44,0x12,
      };
  inline u16 *copyImage(u16 *vram) {
    for (u32 i = 0; i < sizeof(img) / 2; ++i) {
      *vram++ = img[i * 2] | (img[i * 2 + 1] << 8);
    }
    return vram;
  }
  inline u16 *copyPalette(u16 *pal) {
    for (u32 i = 0; i < sizeof(palette) / 2; ++i) {
      *pal++ = palette[i];
    }
    return pal;
  }
};
