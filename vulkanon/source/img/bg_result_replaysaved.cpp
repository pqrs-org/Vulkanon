/*
Bmp 4/8 Bits to GBA Converter By Bruno Vedder.
With modifications by Pete Elmore.
bg/bg_result_replaysaved.bmp Opened.
Bmp signature found.
Bmp width: 96
Bmp height: 16
Bmp not compressed: ok.
One plane.
Bmp is 4 Bit per pixel.
16 colors used. (0 mean full bpp).
Bmp data starts at 76h.
Allocating 768 bytes.
CMAP loaded.
Data loaded. */
namespace TILEINFO_bg_result_replaysaved {
  enum {
    w = 12,
    h = 2,
    size = 24,
  };
  const unsigned short palette[] = {
    0x0,0x842,0x1084,0x1ce7,0x2529,0x2d6b,0x35ad,0x3def,0x4210,0x4a52,0x56b5,0x5ef7,0x6318,0x6f7b,0x739c,0x7fff,
    };

  const unsigned char img[] = {

    // Tile [0 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x21,0x22,0x22,0x12,
    0x71,0x88,0x88,0x78,
    0x71,0x58,0x44,0x85,
    0x71,0x28,0x11,0x61,
    0x71,0x28,0x11,0x71,
    0x71,0x68,0x66,0x77,
    
    // Tile [1 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x14,0x11,0x11,0x11,
    0x28,0x11,0x11,0x11,
    0x38,0x11,0x54,0x35,
    0x28,0x61,0x78,0x87,
    0x14,0x83,0x15,0x72,
    
    // Tile [2 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x21,0x45,0x53,
    0x14,0x21,0x78,0x77,
    0x17,0x21,0x88,0x13,
    
    // Tile [3 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x22,
    0x11,0x11,0x11,0x78,
    0x11,0x11,0x11,0x78,
    0x25,0x11,0x11,0x78,
    0x78,0x12,0x11,0x78,
    0x84,0x16,0x11,0x78,
    
    // Tile [4 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x21,0x54,0x35,
    0x11,0x71,0x78,0x87,
    0x11,0x73,0x15,0x82,
    
    // Tile [5 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x41,0x25,0x11,0x53,
    0x45,0x58,0x11,0x86,
    0x27,0x78,0x11,0x67,
    
    // Tile [6 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x73,
    0x11,0x11,0x21,0x77,
    0x13,0x11,0x31,0x58,
    0x12,0x11,0x31,0x78,
    0x11,0x11,0x11,0x86,
    
    // Tile [7 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x33,0x13,0x11,0x11,
    0x88,0x78,0x14,0x11,
    0x34,0x74,0x28,0x11,
    0x11,0x41,0x47,0x11,
    0x23,0x11,0x11,0x11,
    0x88,0x67,0x13,0x31,
    
    // Tile [8 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x42,0x55,0x13,0x31,
    0x87,0x77,0x58,0x41,
    0x57,0x21,0x78,0x21,
    
    // Tile [9 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x25,0x11,0x53,0x12,
    0x58,0x11,0x86,0x12,
    0x77,0x21,0x68,0x31,
    
    // Tile [10 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x41,0x55,0x13,0x11,
    0x86,0x77,0x48,0x11,
    0x58,0x21,0x77,0x31,
    
    // Tile [11 , 0] 
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x21,0x12,
    0x11,0x11,0x83,0x15,
    0x11,0x11,0x83,0x15,
    0x41,0x45,0x83,0x15,
    0x85,0x78,0x87,0x15,
    0x78,0x22,0x86,0x15,
    
    // Tile [0 , 1] 
    0x71,0x78,0x77,0x78,
    0x71,0x28,0x11,0x83,
    0x71,0x28,0x11,0x81,
    0x71,0x28,0x11,0x82,
    0x71,0x28,0x11,0x71,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    
    // Tile [1 , 1] 
    0x13,0x85,0x45,0x74,
    0x17,0x85,0x67,0x66,
    0x17,0x85,0x13,0x21,
    0x18,0x83,0x26,0x73,
    0x38,0x41,0x87,0x78,
    0x11,0x11,0x32,0x13,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    
    // Tile [2 , 1] 
    0x38,0x21,0x78,0x11,
    0x36,0x21,0x68,0x11,
    0x12,0x21,0x78,0x11,
    0x17,0x21,0x88,0x35,
    0x13,0x21,0x68,0x86,
    0x11,0x21,0x68,0x31,
    0x11,0x21,0x68,0x11,
    0x11,0x21,0x68,0x11,
    
    // Tile [3 , 1] 
    0x81,0x17,0x11,0x78,
    0x71,0x18,0x11,0x78,
    0x82,0x17,0x11,0x78,
    0x86,0x14,0x11,0x78,
    0x68,0x11,0x11,0x78,
    0x13,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    
    // Tile [4 , 1] 
    0x11,0x11,0x43,0x86,
    0x11,0x72,0x68,0x85,
    0x11,0x84,0x14,0x82,
    0x11,0x84,0x36,0x86,
    0x11,0x72,0x88,0x75,
    0x11,0x11,0x23,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    
    // Tile [5 , 1] 
    0x17,0x86,0x32,0x48,
    0x17,0x84,0x54,0x28,
    0x17,0x72,0x76,0x16,
    0x17,0x61,0x88,0x14,
    0x27,0x31,0x78,0x12,
    0x11,0x21,0x68,0x11,
    0x11,0x63,0x38,0x11,
    0x11,0x76,0x15,0x11,
    
    // Tile [6 , 1] 
    0x11,0x11,0x11,0x31,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x41,0x58,
    0x11,0x11,0x21,0x87,
    0x11,0x11,0x11,0x73,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    
    // Tile [7 , 1] 
    0x54,0x87,0x48,0x11,
    0x11,0x41,0x68,0x21,
    0x11,0x21,0x68,0x41,
    0x35,0x64,0x48,0x41,
    0x88,0x78,0x15,0x21,
    0x32,0x13,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    
    // Tile [8 , 1] 
    0x31,0x64,0x78,0x11,
    0x87,0x56,0x78,0x11,
    0x48,0x21,0x78,0x11,
    0x68,0x63,0x78,0x11,
    0x87,0x58,0x77,0x12,
    0x31,0x12,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    
    // Tile [9 , 1] 
    0x86,0x42,0x48,0x51,
    0x83,0x54,0x28,0x51,
    0x71,0x76,0x16,0x51,
    0x51,0x88,0x14,0x31,
    0x31,0x78,0x12,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    
    // Tile [10 , 1] 
    0x58,0x44,0x87,0x43,
    0x78,0x66,0x66,0x53,
    0x38,0x11,0x22,0x41,
    0x68,0x32,0x77,0x21,
    0x74,0x88,0x37,0x11,
    0x21,0x33,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
    
    // Tile [11 , 1] 
    0x48,0x11,0x84,0x15,
    0x38,0x11,0x83,0x15,
    0x58,0x11,0x84,0x15,
    0x77,0x44,0x87,0x15,
    0x73,0x88,0x86,0x15,
    0x21,0x23,0x11,0x11,
    0x11,0x11,0x11,0x11,
    0x11,0x11,0x11,0x11,
      };
  inline u16 *copyImage(u16 *vram) {
    for (u32 i = 0; i < sizeof(img) / 2; ++i) {
      *vram++ = img[i * 2] | (img[i * 2 + 1] << 8);
    }
    return vram;
  }
  inline u16 *copyPalette(u16 *pal) {
    for (u32 i = 0; i < sizeof(palette) / 2; ++i) {
      *pal++ = palette[i];
    }
    return pal;
  }
};
