/*
Bmp 4/8 Bits to GBA Converter By Bruno Vedder.
With modifications by Pete Elmore.
bg/bg_menu_version.bmp Opened.
Bmp signature found.
Bmp width: 48
Bmp height: 8
Bmp not compressed: ok.
One plane.
Bmp is 4 Bit per pixel.
0 colors used. (0 mean full bpp).
Bmp data starts at 76h.
Allocating 192 bytes.
CMAP loaded.
Data loaded. */
namespace TILEINFO_bg_menu_version {
  enum {
    w = 6,
    h = 1,
    size = 6,
  };
  const unsigned short palette[] = {
    0x3e0,0xc63,0x14a5,0x1ce7,0x2529,0x2d8b,0x35cd,0x3e10,0x4a52,0x5294,0x5ad6,0x6318,0x6b5a,0x739c,0x77bd,0x7fff,
    };

  const unsigned char img[] = {

    // Tile [0 , 0] 
    0x0,0x0,0x0,0xf0,
    0x0,0x0,0x0,0xf0,
    0x0,0x0,0x0,0xb0,
    0x0,0x0,0x0,0x30,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [1 , 0] 
    0x0,0xf0,0x0,0x0,
    0x0,0xf0,0x0,0x0,
    0x5,0xb5,0x40,0xfd,
    0xc,0x3c,0xe0,0x3,
    0xab,0xb,0xf0,0xff,
    0xf3,0x3,0xe0,0x3,
    0x70,0x0,0x40,0xfe,
    0x0,0x0,0x0,0x0,
    
    // Tile [2 , 0] 
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x4d,0xf0,0xc2,0x4e,
    0xd3,0xf0,0x2c,0xe3,
    0xff,0xf0,0x1,0x0,
    0x0,0xf0,0x0,0x0,
    0xff,0xf0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    
    // Tile [3 , 0] 
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0x70,0xfd,0xff,0xf0,
    0xf1,0x4,0x0,0x0,
    0x60,0xfd,0x5d,0x0,
    0x0,0x0,0xe4,0x0,
    0xf2,0xff,0x5c,0xf0,
    0x0,0x0,0x0,0x0,
    
    // Tile [4 , 0] 
    0xb,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0xf,0x40,0xfd,0x4d,
    0xf,0xe0,0x3,0xd3,
    0xf,0xf0,0x0,0xf0,
    0xf,0xe0,0x3,0xd3,
    0xff,0x40,0xfe,0x4e,
    0x0,0x0,0x0,0x0,
    
    // Tile [5 , 0] 
    0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,
    0xf0,0xc2,0x4e,0x0,
    0xf0,0x2c,0xe3,0x0,
    0xf0,0x1,0xf0,0x0,
    0xf0,0x0,0xf0,0x0,
    0xf0,0x0,0xf0,0x0,
    0x0,0x0,0x0,0x0,
      };
  inline u16 *copyImage(u16 *vram) {
    for (u32 i = 0; i < sizeof(img) / 2; ++i) {
      *vram++ = img[i * 2] | (img[i * 2 + 1] << 8);
    }
    return vram;
  }
  inline u16 *copyPalette(u16 *pal) {
    for (u32 i = 0; i < sizeof(palette) / 2; ++i) {
      *pal++ = palette[i];
    }
    return pal;
  }
};
